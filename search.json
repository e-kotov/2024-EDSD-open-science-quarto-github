[
  {
    "objectID": "task-01.html",
    "href": "task-01.html",
    "title": "1. Workshop Task",
    "section": "",
    "text": "Your task is to create a reproducible summary report with key statistics and a flowmap using the Scholarly Migration Database. This is a beginner level task.\nIf you are feeling especially confident, you can use the data from the The Human Migration Database, which you can download via the interactive web app (see last the tab for downloads). Warning: this is likely take more time than with the Scholarly Migration Database, as there are more data columns and you will spend more time reading the codebook. So only go for this task if the R programming part and Quarto are easy for your.",
    "crumbs": [
      "1. Workshop Task"
    ]
  },
  {
    "objectID": "task-01.html#cloning-the-repository",
    "href": "task-01.html#cloning-the-repository",
    "title": "1. Workshop Task",
    "section": "1. Cloning the repository",
    "text": "1. Cloning the repository\n\n1.1. Clone using your GitHub account\n\nGo to the repository of the Scholarly Migration Database and “Fork” it into your GitHub account.\n\n\n\nOpen RStudio and create a new project.\n2.1. Choose “Version Control”:\n\n2.2. Choose “Git” as your version control system:\n\n2.3. Copy the link to your repository from the web and paste it in the prompt:\n\n2.4. If this is your first time using git and GitHub on this computer, you should get a prompt like this:\n\nYou should choose the blue button “Sign in with your browser”.\n2.5. Complete the authentication in the web browser with your GitHub account:\n\n\nYou only need to do this once, as this sets up your local git installation to use your GitHub acccount. So when you work with another online repository, you should just be able to access it without those extra steps.\n\n\n1.2. Fallback if everything else fails, just download the repository\nIf nothing works for you, feel free to just download the Scholarly Migration Database repository manually.",
    "crumbs": [
      "1. Workshop Task"
    ]
  },
  {
    "objectID": "task-01.html#explore-the-data",
    "href": "task-01.html#explore-the-data",
    "title": "1. Workshop Task",
    "section": "2. Explore the data",
    "text": "2. Explore the data\n\nCreate a new Quarto document in the root folder of the cloned or downloaded repository:\n\nEither in the top left of RStudio:\n\nOr in the bottom right in the Files pane:\n\n\nUsing the basic R and Quarto syntax (see intro reference of basic Quarto syntax here), list the packages you need to be loaded in the first chunk/block of code.\nUse the more chunks/blocks of code to load the data (you may use either openalex_2024_V1_scholarlymigration_countryflows_enriched.csv or scopus_2024_V1_scholarlymigration_countryflows_enriched.csv) and explore it. You may ignore the code visibility options for now. Just leave default options for code blocks by not addint any options at this point. Use dplyr for data manipulation and ggplot2 for data visualization.",
    "crumbs": [
      "1. Workshop Task"
    ]
  },
  {
    "objectID": "task-01.html#spatial-aspect-of-the-migration-data",
    "href": "task-01.html#spatial-aspect-of-the-migration-data",
    "title": "1. Workshop Task",
    "section": "3. Spatial aspect of the migration data",
    "text": "3. Spatial aspect of the migration data\nApart from the histograms, scatterplots or other plots, it is also useful to look at your data on a map like so:\n\nshiny::tags$iframe(src = \"media/interactive/flowmap_widget.html\", width = \"100%\", height = \"600px\")\n\n\n\n\nThe data in the Scholarly Migration Database does not contain coordinates, but has country names and their ISO codes. So you can combine this data with some other datasource that coordinates or boundaries for countries and their ISO codes.\n\n3.1 Packages for spatial data and flow mapping\nHere is a list of packages that you need to map the migration data:\n\npackages &lt;- c(\n  \"sf\", # for working with spatial data\n  \"spData\", # to easily get world boundaires\n  \"countrycode\", # to convert between iso2 and iso3 country codes\n  \"flowmapblue\", # for interactive flow mapping\n  \"flowmapper\", # for static flow mapping using ggplot2\n  )\ninstall.packages(packages)\n\n\nlibrary(sf)\nlibrary(spData)\nlibrary(countrycode)\nlibrary(flowmapblue)\nlibrary(flowmapper)\n\nlibrary(tidyverse)\n\n\n\n3.2. How to prepare the data for flow mapping\nFor mapping the flows you will need the coorindates of the countries.\nAn easy way to create these coordinates is by getting the data on country boundaries from the {spData} package:\n\ncountries &lt;- spData::world\nglimpse(countries)\n\nRows: 177\nColumns: 11\n$ iso_a2    &lt;chr&gt; \"FJ\", \"TZ\", \"EH\", \"CA\", \"US\", \"KZ\", \"UZ\", \"PG\", \"ID\", \"AR\", …\n$ name_long &lt;chr&gt; \"Fiji\", \"Tanzania\", \"Western Sahara\", \"Canada\", \"United Stat…\n$ continent &lt;chr&gt; \"Oceania\", \"Africa\", \"Africa\", \"North America\", \"North Ameri…\n$ region_un &lt;chr&gt; \"Oceania\", \"Africa\", \"Africa\", \"Americas\", \"Americas\", \"Asia…\n$ subregion &lt;chr&gt; \"Melanesia\", \"Eastern Africa\", \"Northern Africa\", \"Northern …\n$ type      &lt;chr&gt; \"Sovereign country\", \"Sovereign country\", \"Indeterminate\", \"…\n$ area_km2  &lt;dbl&gt; 19289.97, 932745.79, 96270.60, 10036042.98, 9510743.74, 2729…\n$ pop       &lt;dbl&gt; 885806, 52234869, NA, 35535348, 318622525, 17288285, 3075770…\n$ lifeExp   &lt;dbl&gt; 69.96000, 64.16300, NA, 81.95305, 78.84146, 71.62000, 71.039…\n$ gdpPercap &lt;dbl&gt; 8222.2538, 2402.0994, NA, 43079.1425, 51921.9846, 23587.3375…\n$ geom      &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((-180 -16.55..., MULTIPOLYGON ((…\n\n\nSo this spatial data is just like a regular data.frame/tibble, but with an extra column with geometry data. Therefore, you can plot this data using ggplot2:\n\ncountries |&gt; \n  ggplot() +\n  geom_sf()\n\n\n\n\n\n\n\n\nYou can also include several layers in the same plot:\n\nggplot() +\n  geom_sf(data = countries) +\n  geom_sf(data = st_centroid(countries), color = \"darkred\")\n\n\n\n\n\n\n\n\nFor flow mapping, you only one point per country, so you only need a center (or more formally a ‘centroid’) of each country’s polygon. Here is how you can do it:\n\ncountries_centroids &lt;- countries |&gt; \n  st_centroid() |&gt; # finds a center of each country'spolygon\n  st_coordinates() |&gt;  # extracts numeric coorindates from the POINT geometry\n  as.data.frame() |&gt; # converts the matrix to a data.frame \n  setNames(c(\"lon\", \"lat\")) |&gt; # renames the columns\n  cbind(countries) |&gt; # adds back all the columns (except for geometry) form `countries`\n  select(iso_a2, lon, lat, name_long) # only selects a few columns that we really need\n\nglimpse(countries_centroids)\n\nRows: 177\nColumns: 4\n$ iso_a2    &lt;chr&gt; \"FJ\", \"TZ\", \"EH\", \"CA\", \"US\", \"KZ\", \"UZ\", \"PG\", \"ID\", \"AR\", …\n$ lon       &lt;dbl&gt; 178.56842, 34.74198, -12.18574, -96.39551, -103.57290, 67.23…\n$ lat       &lt;dbl&gt; -17.3156217, -6.2505643, 24.2783849, 60.4767578, 44.7559814,…\n$ name_long &lt;chr&gt; \"Fiji\", \"Tanzania\", \"Western Sahara\", \"Canada\", \"United Stat…\n\n\nYou may freely reuse this code above in your Quarto report.\nThe data format you get is ideal for both {flowmapblue} and {flowmapper} packages. You only need to tweak the column names of the countries_centroids data.frame before using it with either of these packages. You can see relevant package documentation for more details. Alternatively, you can follow tutorials for {flowmapper} and {flowmapblue}.\n\n\n3.3. Country codes\nYou will find that the country code data in the Scholarly Migration Database does not match with the country names in the countries data.frame. Scholarly migration database uses ISO 3166-1 alpha-3 codes, and countrycode uses the ISO 3166-1 alpha-2 codes. So you need to convert the country names in the countries data.frame to ISO 3166-1 alpha-3 codes.\nYou can do this conversion using the countrycode package like so:\n\nlibrary(countrycode)\n\n# assuming your data.frame is called `scopus_country_flows`\nscopus_country_flows &lt;- scopus_country_flows |&gt; \n  mutate(\n    iso2codefrom = countrycode(iso3codefrom,\n      origin = \"iso3c\",\n      destination = \"iso2c\"),\n    iso2codeto = countrycode(iso3codeto,\n      origin = \"iso3c\",\n      destination = \"iso2c\")\n  )\n\n\n\n3.4. Hints on plotting the flows\n\n{flowmapper}\nTo plot the flows statically with {flowmapper}, you only need a regular code chunk, same as you would have for a ggplot2 plot.\nFeel free to adapt this tutorial, but use the Scholarly Migration Database data instead of the mobility data used there.\n\n\n{flowmapblue}\nTo create interactive flow maps with the {flowmapblue}, you will need a free MapBox account. Feel free to adapt this tutorial, but use the Scholarly Migration Database data instead of the mobility data used there.\nTo include the interactive plot with {flowmapblue}, you may need a somewhat more sophisticated code chunk. See the instructions below.\nIf you created an interactive flowmap like so:\n\nflowmap &lt;- flowmapblue(locations = locations, flows = flows, mapboxAccessToken = mapbox_access_token)\n\nBut simply printing the flowmap object in a code block breaks your entire Quarto document, here is what you need to do.\nSave the flowmap to an html file:\n\nhtmlwidgets::saveWidget(flowmap, \"flowmap.html\")\n\nThen include the html file in your Quarto document like so:\n\nlibrary(shiny)\nshiny::tags$iframe(src = \"flowmap_widget.html\", width = \"100%\", height = \"600px\")",
    "crumbs": [
      "1. Workshop Task"
    ]
  },
  {
    "objectID": "task-01.html#create-your-final-document",
    "href": "task-01.html#create-your-final-document",
    "title": "1. Workshop Task",
    "section": "4. Create your final document",
    "text": "4. Create your final document\nOnce you have figured out which summary plots and which flow map you would like to include in your final document, create a copy of your draft document that you were working with and clean it up. Only keep the code that you absolutely need for the document to be rendered without errors. Name this copy index.qmd.\nAdjust the code visibility in your final document to your liking, using the Quarto documentation on HTML blokcs and code execution.\nCreate a file named _quarto.yaml in the root of the repository and add the following to it:\n\nproject:\n  output-dir: docs\n\nMake sure you respect the indentation (i.e. number of tabs/spaces before output-dir) of the YAML file.\nThen render your final Quarto document into an html file, it should end up in the docs folder with the name index.html.",
    "crumbs": [
      "1. Workshop Task"
    ]
  },
  {
    "objectID": "task-01.html#submit",
    "href": "task-01.html#submit",
    "title": "1. Workshop Task",
    "section": "5. Submit",
    "text": "5. Submit\nPost the link to your repository in issues of this repository: https://github.com/e-kotov/2024-EDSD-open-science-quarto-github/issues",
    "crumbs": [
      "1. Workshop Task"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Workshop Introduction",
    "section": "",
    "text": "This website provides supporting materials for the workshop Open Science and Reproducibility with Quarto, GitHub, and R which is part of the European Doctoral School of Demography (EDSD) 2024 preparatory courses hosted by the Max Planck Institute for Demographic Research (Rostock, Germany). This website, its source as well as all the supporting materials are licensed under the CC0 license.",
    "crumbs": [
      "Workshop Introduction"
    ]
  },
  {
    "objectID": "index.html#expected-learning-outcomes",
    "href": "index.html#expected-learning-outcomes",
    "title": "Workshop Introduction",
    "section": "Expected learning outcomes",
    "text": "Expected learning outcomes\n\nAble to use Quarto to create html and pdf documents with plain and markdown-formatted text and R code.\nAble to upload a project with reproducible analysis to GitHub.\n\n\nPrerequisites\nStudents must have basic R training, including knowledge of the tidyverse for data manipulation and ggplot2 for data visualization, as well as familiarity with RStudio (as provided in the EDSD 140 Computer Programming for Demographers course). To participate in the workshop, we recommend that you have a GitHub account and have R, RStudio, and git installed. You can follow the setup instructions here.\n\n\nRecommended readings\n\nHow to create a GitHub account: https://docs.github.com/en/get-started/start-your-journey/creating-an-account-on-github\nBrief intro to Quarto: https://quarto.org/docs/get-started/hello/rstudio.html\nQuarto documentation: https://quarto.org/docs/reference/\n\nQuarto is “an open-source scientific and technical publishing system” 1 that allows you to generate reproducible reports, websites, presentations and much more, by mixing plain text, simple markdown text formatting, and code. And not just R code, but also Python and Julia. The output format can be html, pdf, but also docx (if you really need it). You can also use addons/extensions to convert simple documents written in Quarto to publication ready pdfs using relevant templates.",
    "crumbs": [
      "Workshop Introduction"
    ]
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "Workshop Introduction",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nSource: https://quarto.org/↩︎",
    "crumbs": [
      "Workshop Introduction"
    ]
  },
  {
    "objectID": "questions.html",
    "href": "questions.html",
    "title": "Questions",
    "section": "",
    "text": "During the workshop, if for whatever reason you are hesitating to ask a question outloud, you can use the Slido below to ask it anonymously.",
    "crumbs": [
      "0b. Questions during the workshop"
    ]
  },
  {
    "objectID": "00-setup.html",
    "href": "00-setup.html",
    "title": "0a. Setup",
    "section": "",
    "text": "Please follow these instructions to install R and RStudio.\nOn macOS, the quickest way to install R and RStudio without manually downloading those, clicking and dragging, is to use the Homebrew package manager in the Terminal.app:\nbrew install --cask r\nbrew install --cask rstudio\n\n\n\nYou do not actually have to install Quarto for this workshop or if you only use it inside RStudio, as it comes bundled with RStudio since v2022.07. However, if at any point you will feel like you want a separate Quarto installation (e.g. you may want to manually run it outside of RStudio), you can do so here. The quarto R package is also completely optional (as it is just a wrapper around the Quarto command line tool), and can be installed with install.packages(\"quarto\") in RStudio.\n\n\n\n\nmacOSWindowsLinux\n\n\nThe best way to install git (and other software) on macOS is to use Homebrew package manager. Since you are already somewhat comfortable with R, and you are about to learn git, you will have to get comfortable with terminal commands anyway, as this is inevitable in the long term.\nThis may seem like a hassle, compared to Windows, but in the long run it will save you a lot of time after this one-time setup. You can follow the video here to guide you through the process, or the text instructions below.\n\n\n\n\nOpen details\n\n\nOpen the Terminal.app on your mac.\nGo to the Homebrew website https://brew.sh/.\nCopy whichever command they will have on the website under the “Install Homebrew” heading. This is one of the few occasions where you can trust the command you copy from a website to run in the Terminal. Running random commands from the internet is not safe. Always make sure you trust the website or person that is asking you to run any command in the Terminal.\n\nPress Enter and confirm with your password (in Terminal you do not see that you are typing your password, but actually you are). Same as above, make sure you trust whomever is telling you to confirm any terminal command with your password. Confirm again with Enter the installation of command line tools.\nWait for about 5 minutes.\nWhen the installation is complete, you should see the following:\n\n\n\nHomebrew is installed, follow the post-installation instructions by running the two commands you see in teh end of the output\n\n\nTo finilise the process, follow the post-installation instructions by running the two commands you see in the end of the output. The first command is unique to you, because it includes your username. However, you can also use these parametrised username-agnostic commands below ($(whoami) will be converted to your username when you run it):\n\nThis adds Homebrew to your terminal profile, so that the brew command is always available:\n\n(echo; echo 'eval \"$(/opt/homebrew/bin/brew shellenv)\"') &gt;&gt; /Users/$(whoami)/.zprofile\n\nThis does the same as above, but for the currently open terminal window, so that you do not have to restart it:\n\neval \"$(/opt/homebrew/bin/brew shellenv)\"\n\nNow you can install any software using commands in the terminal.\n\n\n\n\nOnce Homebrew is installed, open the Terminal.app on your mac and run the following command to install git:\nbrew install git\nAlso, for easier authentication, install the Git Credential Manager (GCM) using:\nbrew install --cask git-credential-manager\n\n\n\nGet git installer here and feel free to follow any of the multiple youtube videos on how to install git on Windows if you are stuck. This video is a good one. I recommend the choices that the author of the video selects during the installation. Among those choices, one of the most important one is to install the Git Credential Manager (GCM), which will allow you to authenticate with GitHub more easily.\n\n\nIf you are on Linux, you probably know what you are doing. Just find your Linux distribution on this list and follow the instructions there. You may also find this video helpful.\nOverall the process is extremely simple, e.g. on Ubuntu you just run this in the terminal:\napt-get install git\n\n\n\n\n\n\nFollow the official instructions here to create a GitHub account. In practice, this is no different from creating an account on any other website. To protect your GitHub account, consider using two-factor authentication\n\n\n\nThe git terminal command to manage your project repository can be used locally and does not require GitHub, but if you want to upload your project to GitHub, you will need to authenticate with GitHub. The easiest way to do that is using the Git Credential Manager (GCM). You should have installed it in the steps above.\nIf you are confident with command line, you may opt for a hard way to set up git authentication using ssh keys. The landing page for the official set of tutorials is here. Authentication with ssh keys is recommended for advanced users who need some more flexibility compared to GCM, but for this tutorial GCM is sufficient.",
    "crumbs": [
      "0a. Setup"
    ]
  },
  {
    "objectID": "00-setup.html#install-software",
    "href": "00-setup.html#install-software",
    "title": "0a. Setup",
    "section": "",
    "text": "Please follow these instructions to install R and RStudio.\nOn macOS, the quickest way to install R and RStudio without manually downloading those, clicking and dragging, is to use the Homebrew package manager in the Terminal.app:\nbrew install --cask r\nbrew install --cask rstudio\n\n\n\nYou do not actually have to install Quarto for this workshop or if you only use it inside RStudio, as it comes bundled with RStudio since v2022.07. However, if at any point you will feel like you want a separate Quarto installation (e.g. you may want to manually run it outside of RStudio), you can do so here. The quarto R package is also completely optional (as it is just a wrapper around the Quarto command line tool), and can be installed with install.packages(\"quarto\") in RStudio.\n\n\n\n\nmacOSWindowsLinux\n\n\nThe best way to install git (and other software) on macOS is to use Homebrew package manager. Since you are already somewhat comfortable with R, and you are about to learn git, you will have to get comfortable with terminal commands anyway, as this is inevitable in the long term.\nThis may seem like a hassle, compared to Windows, but in the long run it will save you a lot of time after this one-time setup. You can follow the video here to guide you through the process, or the text instructions below.\n\n\n\n\nOpen details\n\n\nOpen the Terminal.app on your mac.\nGo to the Homebrew website https://brew.sh/.\nCopy whichever command they will have on the website under the “Install Homebrew” heading. This is one of the few occasions where you can trust the command you copy from a website to run in the Terminal. Running random commands from the internet is not safe. Always make sure you trust the website or person that is asking you to run any command in the Terminal.\n\nPress Enter and confirm with your password (in Terminal you do not see that you are typing your password, but actually you are). Same as above, make sure you trust whomever is telling you to confirm any terminal command with your password. Confirm again with Enter the installation of command line tools.\nWait for about 5 minutes.\nWhen the installation is complete, you should see the following:\n\n\n\nHomebrew is installed, follow the post-installation instructions by running the two commands you see in teh end of the output\n\n\nTo finilise the process, follow the post-installation instructions by running the two commands you see in the end of the output. The first command is unique to you, because it includes your username. However, you can also use these parametrised username-agnostic commands below ($(whoami) will be converted to your username when you run it):\n\nThis adds Homebrew to your terminal profile, so that the brew command is always available:\n\n(echo; echo 'eval \"$(/opt/homebrew/bin/brew shellenv)\"') &gt;&gt; /Users/$(whoami)/.zprofile\n\nThis does the same as above, but for the currently open terminal window, so that you do not have to restart it:\n\neval \"$(/opt/homebrew/bin/brew shellenv)\"\n\nNow you can install any software using commands in the terminal.\n\n\n\n\nOnce Homebrew is installed, open the Terminal.app on your mac and run the following command to install git:\nbrew install git\nAlso, for easier authentication, install the Git Credential Manager (GCM) using:\nbrew install --cask git-credential-manager\n\n\n\nGet git installer here and feel free to follow any of the multiple youtube videos on how to install git on Windows if you are stuck. This video is a good one. I recommend the choices that the author of the video selects during the installation. Among those choices, one of the most important one is to install the Git Credential Manager (GCM), which will allow you to authenticate with GitHub more easily.\n\n\nIf you are on Linux, you probably know what you are doing. Just find your Linux distribution on this list and follow the instructions there. You may also find this video helpful.\nOverall the process is extremely simple, e.g. on Ubuntu you just run this in the terminal:\napt-get install git\n\n\n\n\n\n\nFollow the official instructions here to create a GitHub account. In practice, this is no different from creating an account on any other website. To protect your GitHub account, consider using two-factor authentication\n\n\n\nThe git terminal command to manage your project repository can be used locally and does not require GitHub, but if you want to upload your project to GitHub, you will need to authenticate with GitHub. The easiest way to do that is using the Git Credential Manager (GCM). You should have installed it in the steps above.\nIf you are confident with command line, you may opt for a hard way to set up git authentication using ssh keys. The landing page for the official set of tutorials is here. Authentication with ssh keys is recommended for advanced users who need some more flexibility compared to GCM, but for this tutorial GCM is sufficient.",
    "crumbs": [
      "0a. Setup"
    ]
  }
]